{"version":3,"sources":["Components/title.js","API/index.js","Components/register.js","Components/login.js","Components/posts.js","Components/search.js","Components/profile.js","index.js"],"names":["Title","id","className","fetchAllPosts","token","a","fetch","headers","response","json","result","error","console","log","data","posts","fetchNewUser","setToken","userName","password","verifyPassword","alert","method","body","JSON","stringify","user","username","localStorage","setItem","loginUser","getItem","createPost","title","description","price","deliver","location","post","willDeliver","userData","deletePost","POST_ID","createMessage","content","_id","message","testToken","loggedIn","Register","props","history","useState","setUserName","setPassword","setVerifyPassword","onSubmit","event","preventDefault","push","onChange","target","value","type","placeholder","required","Login","match","confirmedPassword","setConfirmedPassword","url","to","Logout","onClick","storageToken","removeItem","Posts","setPosts","isLoggedIn","useEffect","setFilteredResults","map","element","index","author","Newpost","setTitle","setDescription","setPrice","setDeliver","setLocation","useHistory","Message","setMessage","newMessage","Search","searchTerm","setSearchTerm","mySearchFilteredPosts","toLowerCase","filter","positionInArray","includes","filterThosePosts","Profile","userPosts","setUserPosts","userMessages","setUserMessages","messages","active","fromUser","App","storedToken","path","render","routeProps","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.01da3b71.chunk.js","sourcesContent":["import React from 'react';\n\n// This is just my title header with the title of my project and my name as the developer.\n\nconst Title = () => {\n    return  <div id=\"title\" className=\"jumbotron text-center\">\n                <h1 className=\"text-info\">STRANGER'S THINGS</h1>\n                <h5 className=\"text-warning\">Developed by Derek Miller</h5>\n                \n                \n            </div>\n\n}\n\nexport default Title;","// This file features and exports all fetch calls to the API\n\nexport const BASE_URL = 'https://strangers-things.herokuapp.com';\nexport const COHORT = '2107-CSU-RM-WEB-PT';\n\n// This function fetches all current posts from the API\nexport const fetchAllPosts = async (token) => {\n    try {\n        const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/posts', {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + token\n            }\n        }\n        )\n        const result = await response.json();\n        \n        \n        if (result.error) throw result.error;\n        console.log(result)\n        return result.data.posts\n    }\n    catch (err) {\n        console.error (\"Trouble fetching posts\", err)\n    }\n}\n\n// This function is used to register new user\nexport const fetchNewUser = async (setToken, userName, password, verifyPassword) => {\n    \n    try {\n        if (password !== verifyPassword) {\n            alert(\"PASSWORDS DON'T MATCH!\");\n            return;\n        }\n\n        const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/users/register', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user: {\n                    username: userName,\n                    password: password\n                }\n            })\n        })\n        const result = await response.json();\n        const token = result.data.token\n        console.log(\"fetch new user\", result)\n        setToken(token);\n        localStorage.setItem(\"token\", token);\n        if (result.error) throw result.error;\n        console.log(result)\n    }\n    catch (err) {\n        console.error (\"Trouble registering\", err)\n    }\n   }\n\n// This function will login an existing user\n   export const loginUser = async (userName, password, setToken) => {\n       try {const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/users/login', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username: userName,\n            password: password\n          }\n        })\n      })\n            const result = await response.json();\n            console.log(result.data.token);\n            const token = result.data.token;\n            setToken(token);\n            localStorage.setItem(\"token\", token);\n            localStorage.getItem(\"token\");\n            if (result.error) throw result.error;\n            console.log(result);\n    \n    }\n        catch (err) {\n            console.error (\"Trouble logging in\", err)\n        }\n   }\n\n// This function will attempt to create a new posting\n    export const createPost = async (token, title, description, price, deliver, location) => {\n        try {\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/posts', {\n                method: \"POST\",\n                headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': 'Bearer ' + token\n                        },\n                body: JSON.stringify({\n                    post: {\n                        title: title,\n                        description: description,\n                        location: location,\n                        price: price,\n                        willDeliver: deliver\n                    }\n                })\n            })\n            const result = await response.json();\n            if (result.error) throw result.error;\n            console.log(result)\n            return result.data.post\n        }\n        catch (err) {\n            console.error(\"Trouble with posting the new post\", err)\n        }\n    } \n    // This function will grab the current loggedin users data\n    export const userData = async (token) => {\n        try {\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/users/me', {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n              },\n            })\n            const result = await response.json();\n            \n            const data = result\n            console.log(\"user Data succesfull??\", result)\n            return data\n            \n            \n            \n        }\n            \n        catch (error) {\n            console.error(\"trouble fetching user data\", error)\n        }\n    }\n    // This function will delete a logged in users post using a token and their postID\n    export const deletePost = async (token, POST_ID) => {\n        try {\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/posts/' + POST_ID, {\n                method: \"DELETE\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token,\n                    \n                },\n            })\n            const result = await response.json();\n            \n            console.log(result);\n            \n        }\n        catch (err) {\n            console.error(\"Error deleting post\", err)\n        }\n    }\n    // This is a function to edit a users post but I did not have time to play with it. I didn't see this was necessary in the grading rubric for this project.\n    export const editPost = async (token, title, description, price, location, deliver) => {\n        try {\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/posts/POST_ID', {\n                method: \"PATCH\",\n                headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': 'Bearer ' + token\n                },\n                body: JSON.stringify({\n                post: {\n                    title: title,\n                    description: description,\n                    price: price,\n                    location: location,\n                    willDeliver: deliver\n                }\n            })\n        })\n        const result = await response.json();\n            if (result.error) throw result.error;\n            console.log(result)\n            return result.data.post;\n        }\n        catch (err) {\n            console.error(\"Trouble with posting the new post\", err)\n        }\n    }\n    // This function is what creates a new message sent by logged in user to the postID of the post\n    export const createMessage = async (token, content, _id) => {\n        console.log(\"ID\", _id);\n        try {\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/posts/' + _id + '/messages', {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                },\n                body: JSON.stringify({\n                    message: {\n                        content: content\n                    }\n                })\n            })\n            const result = await response.json();\n            const id = result.data.message._id;\n            \n            console.log(\"message data:\", id);\n            return result;\n        }\n        catch (err) {\n            console.error(\"Trouble creating new message\", err)\n        }\n    }\n    \n    \n    // This is a test call\n    export const testToken = async (token) => {\n        try {\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/test/me', {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                }\n            })\n            const result = await response.json();\n\n            if (result.error) throw result.error;\n                \n        }\n        catch (err) {\n            console.error(\"Trouble checking for valid token\", err)\n        }\n    }\n    // test call \n    export const loggedIn = async (token) => {\n        try {\n            const response = await fetch('https://strangers-things.herokuapp.com/api/2107-CSU-RM-WEB-PT/users/me', {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer ' + token\n                }\n            })\n            const result = await response.json();\n            console.log(\"User Logged in?\", result)\n           \n        }\n        catch (err) {\n            console.error(\"Trouble fetching info\", err)\n        }\n    } ","import React from 'react';\nimport { useState } from 'react';\nimport { fetchNewUser } from '../API';\n// import { Posts, Login } from '../Components';\n// import { Link } from 'react-router-dom';\n\n// The register component is a form where a new user can enter a username, password, and they must verify their password. \n// All fields are required.\n// Once the fill out form and hit register button, their info will now be authorized and it will push them to the login page where they must login to the site.\n\nconst Register = (props) => {\n    const setToken = props.setToken;\n    const history = props.history\n    \n    const [userName, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n    const [verifyPassword, setVerifyPassword] = useState('');\n\n\n    \n    \n    return(\n        <form onSubmit={async (event) => {\n            event.preventDefault();\n            try {\n                const response = await fetchNewUser(setToken, userName, password, verifyPassword);\n                history.push(\"/login\")\n            }\n            catch (error) {\n                console.error(error)\n\n            }\n            \n            \n        }}>\n                <h3>Register</h3>\n\n                <div className=\"form-group\">\n                    <label>Username</label>\n                    <input onChange={(event) => setUserName(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Username\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input onChange={(event) => setPassword(event.target.value)} type=\"password\" className=\"form-control\" placeholder=\"Enter password\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Verify Password</label>\n                    <input onChange={(event) => setVerifyPassword(event.target.value)} type=\"password\" className=\"form-control\" placeholder=\"Verify password\" required />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-dark btn-lg btn-block\">Register</button>\n                \n            </form>\n    )\n}\n\n\nexport default Register;","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { loginUser, fetchNewUser } from '../API';\n\n\n\n    // This component logs in a registered user and then pushes them to the posts page.\n\nconst Login = ({ setToken, match, history }) => {\n    const [userName, setUserName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [confirmedPassword, setConfirmedPassword] = useState(\"\");\n\n    return(\n        <form\n            onSubmit={(event) => {\n                event.preventDefault();\n                \n                if (match.url === \"/register\") {\n                    fetchNewUser(setToken, userName, password, confirmedPassword)};\n                    history.push(\"/login\")\n                if (match.url === \"/login\") {\n                    console.log(userName, password, confirmedPassword);\n                    loginUser(userName, password, setToken)};\n                    history.push(\"/posts\")\n                    \n            } \n                }>\n            <div className=\"form-group\">\n                    <label>Username</label>\n                    <input \n                        onChange={({target: {value}}) => setUserName(value)} \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Username\" \n                        required \n                    />\n            </div>\n\n            <div className=\"form-group\">\n                    <label>Password</label>\n                    <input \n                        onChange={({target: {value}}) => setPassword(value)} \n                        type=\"password\" \n                        className=\"form-control\" \n                        placeholder=\"Enter password\" \n                        required \n                    />\n            </div>\n            {\n                match.url === \"/register\" ?\n            \n                (<div className=\"form-group\">\n                    <label>Verify Password</label>\n                    <input \n                        onChange={({target: {value}}) => setConfirmedPassword(value)} \n                        type=\"password\"\n                        value={confirmedPassword} \n                        className=\"form-control\" \n                        placeholder=\"Verify password\" \n                        required \n                    />\n                </div>) : null}\n\n                <button \n                    type=\"submit\" \n                    className=\"btn btn-primary btn-dark btn-lg btn-block\">Login\n                </button>\n            {\n                match.url === \"/register\" ?\n                (<Link to=\"login\"> Already have an account?</Link>) : \n                 <Link to=\"register\"> Don't have an account?</Link>\n            }\n        </form>\n    )\n}\n\n\n\n// Logout component will log out the current user and push them to the login page.\n\nconst Logout = ({ token, setToken, history }) => {\n    \n    \n    return (\n        <button\n            onClick={(event) => {\n                const storageToken = token;\n                console.log(\"storage token is:\", storageToken)\n                \n                if (storageToken) {\n                    localStorage.removeItem(\"token\");\n                    setToken(null);\n                    history.push(\"/login\");\n                    }\n            }} \n            type=\"submit\"\n            className=\"btn btn-primary btn-dark btn-lg btn-block\">Logout\n        </button>\n    )\n}\nexport { Login, Logout };","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { fetchAllPosts, createPost, createMessage } from '../API';\nimport { Search } from '../Components';\n\n// This component grabs all current postings from all users and then maps them out and displays them. \n// Only loggedin users will be able to see the message field where they can send a message to the author of each post.\nconst Posts = (props) => {\n    \n    const posts = props.posts;\n    const setPosts = props.setPosts;\n    const token = props.token;\n    \n    const isLoggedIn = props.isLoggedIn;\n    \n    // As soon as page hits the screen useEffect will fetch all posts from api and set them on state\n    useEffect(async () => {\n        \n        const result = await fetchAllPosts(token);\n        setPosts(result);\n    \n    }, []);\n    // This useEffect is supposed to work with my Search component which i never got working.\n    useEffect(() =>{\n        \n        setFilteredResults(posts)\n    \n    }, [posts]);\n\n    // This was to be used with my Search component to make search work...new state, filter function. \n    // I never got the search component working.\n    const [filteredResults, setFilteredResults] = useState([]);\n    \n    return (<div className=\"container\">\n                <h1 className=\"text-center\">Current Postings</h1>\n                <br></br>\n                <Search setFilteredResults={setFilteredResults} posts={posts} />\n                <br></br>\n                <div>\n                    {posts.map((element, index) => {\n            \n                        return (\n                            <div key={index} className=\"containter\">\n                                <h2 className=\"list-group-item-heading text-danger\">\n                                    { element.title }\n                                </h2>\n                                <div className=\"list-group-item-info\">\n                                    Posted by: { element.author.username }\n                                </div>\n                                <div className=\"bg-success\">\n                                    Description: {element.description }\n                                </div>\n                                <div className=\"bg-success list-group-item-text\">\n                                    Location: { element.location }\n                                </div>\n                                <div className=\"list-group-item-text bg-success text-danger\">\n                                    Price: {element.price }\n                                </div>\n                                <div className=\"bg-success list-group-item-text\">\n                                    Will Deliver: { element.willDeliver }\n                                </div>\n                                <br></br>\n                                {token ? <Message token={token} _id={element._id}/>  : null}\n                            </div>)\n                    })}\n                </div>\n            </div>)\n}\n// Newpost component is a form that user will use to make their own new posting and post it to the api for all users to see.\n// Once the new post is created it will push them to the posts page.\nconst Newpost = ({ token, posts, setPosts }) => {\n\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [deliver, setDeliver] = useState(\"\");\n    const [location, setLocation] = useState(\"\")\n    const history = useHistory()\n    return(\n        <form onSubmit={async (event) => {\n            event.preventDefault();\n            try {\n                const response = await createPost(token, title, description, price, deliver, location);\n                \n                setPosts([...posts, response]);\n                history.push(\"/posts\")\n            }\n            catch (error) {\n                console.error(error)\n            }\n        }}>\n                <h3>Make a new post</h3>\n\n                <div className=\"form-group\">\n                    <label>Title</label>\n                    <input onChange={(event) => setTitle(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Title\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Description</label>\n                    <input onChange={(event) => setDescription(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Description\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Location</label>\n                    <input onChange={(event) => setLocation(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Location\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Price</label>\n                    <input onChange={(event) => setPrice(event.target.value)} type=\"number\" className=\"form-control\" placeholder=\"Price\" required />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Will deliver?</label>\n                    <input onChange={(event) => setDeliver(event.target.value)} type=\"text\" className=\"form-control\" placeholder=\"Deliver?\" required />\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Create Post</button>\n                \n            </form>\n    )\n}\n\n// Got sending a message to work, although I cannot tell if it is actually sending the messages to another user or if I am somehow just sending them to myself. \nconst Message = ({token, content, _id }) => {\n    \n    const [message, setMessage] = useState(\"\")\n    const history = useHistory()\n    return (\n        <form \n            onSubmit={async (event) => {\n                event.preventDefault();\n                try {\n                    const response = await createMessage(token, message, _id)\n                    const newMessage = response.data.message.content\n                    \n                    console.log(newMessage);\n                    setMessage(newMessage);\n                    history.push(\"/posts\")\n                }\n                catch (error) {\n                console.error(error)\n            }\n                \n            }}\n            className=\"form-group\">\n            <div className=\"col-lg-6\">\n                <div className=\"input-group\">\n                    <input \n                        onChange={({target: {value}}) => setMessage(value)} \n                        type=\"text\" className=\"form-control\" placeholder=\"Write message here...\" required />\n                        <span className=\"input-group-btn\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Send</button>\n                        </span>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport { Posts, Newpost, Message };","import React from 'react';\nimport { useState } from 'react';\n\n\n// Need to figure out all the logic that goes into the Search component\n// This component is totally jacked up. Tried to follow along and do it during the lecture and idk what i did but it does not work right.\n\nconst Search = ({setFilteredResults, posts}) => {\n\n    function filterThosePosts(posts, searchTerm){\n        searchTerm = searchTerm.toLowerCase();\n        return posts.filter((posts, positionInArray) => {\n            const myPostName = posts.title.toLowerCase();\n            return myPostName.includes(searchTerm);\n        })\n    }\n\n    const [searchTerm, setSearchTerm] = useState('');\n\n    return (\n        <form className=\"form-group\">\n            <div className=\"col-lg-6\">\n                <div className=\"input-group\">\n                    <input \n                        onChange={(event) => {\n                            setSearchTerm(event.target.value)\n                            const mySearchFilteredPosts = filterThosePosts(posts, event.target.value)\n                            setFilteredResults(mySearchFilteredPosts)\n                        }}\n                        \n                        value={searchTerm}\n                        type=\"text\" className=\"form-control\" placeholder=\"Search for...\" required />\n                        <span className=\"input-group-btn\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Go!</button>\n                        </span>\n                </div>\n            </div>\n        </form>\n        \n    )\n\n}\n\n\n\nexport default Search;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { userData, deletePost, fetchAllPosts } from '../API';\nimport { useHistory } from 'react-router-dom';\n\n// When i refresh this /profile page for some reason it has a bug in it. Cannot figure it out. Maybe it's somehow not reading the token. but when i refresh\n// none of my posts or messages display unless I go to another page and then back to the profile page.\n\nconst Profile = (props) => {\n    // Profile component will grab the logged in users data and map through users posts and messages and display them. \n    // If a user post is still active the delete button will appear for that post and will have a message inside post saying \"POST IS CURRENTLY ACTIVE\".\n    // If post is not active the active message will not show and no delete button will be present for that post.\n    const token = props.token;\n    const [userPosts, setUserPosts] = useState([]);\n    const [userMessages, setUserMessages] = useState([]);\n    const history = useHistory();\n    console.log(token)\n    \n    useEffect(async () => {\n        try {\n            if (token) {\n        const result = await userData(token);\n        console.log(\"user data is\", result);\n        const posts = result.data.posts;\n        const messages = result.data.messages;\n        setUserPosts(posts);\n        setUserMessages(messages);}\n        }\n        catch (err) {\n            console.error(\"trouble\", err)\n        }\n        // setUserMessages(result);\n    }, []);\n\n\n    return (<div className=\"container\">\n                <h1 className=\"text-center\">Your Current Postings</h1>\n                <br></br>\n                <div>\n                    {userPosts.map((posts, index) => {\n                        \n                        return (\n                            <div key={index} className=\"containter\">\n                                <h2 className=\"list-group-item-heading text-danger\">\n                                    { posts.title }\n                                </h2>\n                                <div className=\"list-group-item-info\">\n                                    User ID: { posts.author }\n                                </div>\n                                <div className=\"bg-success\">\n                                    Description: {posts.description }\n                                </div>\n                                <div className=\"bg-success list-group-item-text\">\n                                    Location: { posts.location }\n                                </div>\n                                <div className=\"list-group-item-text bg-success text-danger\">\n                                    Price: {posts.price }\n                                </div>\n                                <div className=\"bg-success list-group-item-text\">\n                                    Will Deliver: { posts.willDeliver }\n                                </div>\n\n                                {posts.active ?\n                                <div className=\"bg-success list-group-item-text\">\n                                    POST IS CURRENTLY ACTIVE { posts.active }\n                                </div> : null}\n                                {posts.active ? \n                                <div className=\"form-group\">\n                                    <button \n                                    onClick={async (event) => {\n                                        \n                                        try {\n                                             // calls api function to delete post and then fetches all the posts of user posts.\n                                             // When delete button is pressed the post should delete from main postings page and push user to the posts page\n                                            \n                                            const response = await deletePost(token, posts._id)\n                                            console.log(response)\n                                            fetchAllPosts(userPosts);\n                                            \n                                            history.push(\"/posts\")\n                                            \n                                        }\n                                        catch (err) {\n                                            console.error(\"trouble deleting post\", err)\n                                        }\n                                    }} \n                                    \n                                    type=\"submit\" className=\"btn btn-primary\">Delete Post</button>\n                                </div> : null}\n                            \n                            </div>)\n                    })}\n                </div>\n                <h1 className=\"text-center\">Your Current Messages</h1>\n                <br></br>\n                {userMessages.map((messages, index) => {\n                        return (\n                            <div key={index} className=\"container\">\n                                <h2 className=\"list-group-item-heading text-danger\">\n                                    Message\n                                </h2>\n                                <div className=\"list-group-item-info\">\n                                    Message about: { messages.post.title }\n                                </div>\n                                <div className=\"list-group-item-info\">\n                                    From: { messages.fromUser.username }\n                                </div>\n                                <div className=\"bg-success list-group-item-text\">\n                                    Content: { messages.content }\n                                </div>\n                            </div>)\n                })}\n\n\n            </div>)\n}\n\nexport default Profile;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react'; \nimport { Title, Login, Posts, Register, Newpost, Search, Profile, Logout, Message } from './Components';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { loggedIn, testToken } from './API';\n\nconst App = () => {\n  \n  const [token, setToken] = useState(null);\n  const [posts, setPosts] = useState([]);\n\n  // As soon as page hits screen it will take the token from local storage (if there is one) and set it to storedToken.\n  // Also it will pass the token to the 2 api calls to test the token and see if user is logged in\n  useEffect(() => {\n    \n    const storedToken = localStorage.getItem(\"token\");\n    if (storedToken) {setToken(storedToken);\n      loggedIn(storedToken);\n      testToken(storedToken);\n    }\n  }, []);\n\n  \n  // Profile, Make New Post, and Logout links should only be visible if the user has a valid token. If not they should render null and not be visible to the user.\n  // A logged out user will only see the links for login, register, and posts. logged out user will not be able to delete posts or send messages.\n  \n  return ( \n          <><Title />\n          <br></br>\n            <Router>\n              {token ? <Link to=\"/profile\">Profile </Link> : <Link to=\"/login\"> Login </Link>}\n              {!token ? <Link to=\"/register\"> Register</Link> : null}\n              <Link to=\"/posts\"> Posts </Link>\n              {token ? <Link to=\"/newpost\">Make new post </Link> : null}\n              {token ? <Link to=\"/logout\">Log out </Link> : null}\n              \n\n                \n\n              <Route path=\"/login\" render={(routeProps) => <Login {...routeProps} setToken={setToken} />} />\n              <Route path=\"/register\" render={(routeProps) => <Register {...routeProps} setToken={setToken} />} />\n              <Route path=\"/posts\" render={(routeProps) => <Posts {...routeProps} posts={posts} setPosts={setPosts} isLoggedIn={!!token} token={token} />}/>\n              <Route path=\"/newpost\" render={(routeProps) => <Newpost {...routeProps} posts={posts} setPosts={setPosts} token={token}/>}/>\n              <Route path=\"/profile\" render={(routeProps) => <Profile {...routeProps} token={token} />} />\n              <Route path=\"/logout\" render={(routeProps) => <Logout {...routeProps} setToken={setToken} token={token} />} /> \n              <Route path=\"/message\" render={(routeProps) => <Message {...routeProps} token={token} posts={posts} />} />\n              <Route path=\"/search\" render={(routeProps) => <Search {...routeProps} token={token} posts={posts} />} />\n            </Router></>)\n}\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app'),\n);\n"],"sourceRoot":""}